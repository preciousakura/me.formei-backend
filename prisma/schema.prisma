// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  lastname String
  username String    @unique
  email    String
  password String
  students Student[]
  admins   Admin[]
  city     String
  state    String
}

model Student {
  id                               String                             @id @default(uuid())
  registration                     String                             @unique
  curriculum                       Curriculum                         @relation(fields: [curriculumId], references: [id])
  curriculumId                     String
  user                             User                               @relation(fields: [userId], references: [id])
  userId                           String
  courseHistory                    CourseHistory[]
  extracurricularActivitiesHistory ExtraCurricularActivitiesHistory[]
  enrollmentYear                   Int
  enrollmentSemester               Int
  currentSemester                  Int
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Course {
  id          String       @id @default(uuid())
  name        String       @unique
  curriculums Curriculum[]
}

model University {
  id          String       @id @default(uuid())
  name        String       @unique
  abv         String       @unique
  city        String
  state       String
  curriculums Curriculum[]
}

model Curriculum {
  id                   String       @id @default(uuid())
  students             Student[]
  course               Course       @relation(fields: [courseId], references: [id])
  courseId             String
  description          String
  university           University   @relation(fields: [universityId], references: [id])
  universityId         String
  requiredHours        Int
  optionalHours        Int
  extraCurricularHours Int
  disciplines          Discipline[]
}

model Discipline {
  id                       String          @id @default(uuid())
  cod                      String          @unique
  optional                 Boolean
  name                     String
  courseOutline            String?
  bibliography             String[]
  semester                 Int
  prerequisites            Discipline[]    @relation("prequisitesToDiscipline")
  prerequisitesDisciplines Discipline[]    @relation("prequisitesToDiscipline")
  description              String
  curriculum               Curriculum      @relation(fields: [curriculumId], references: [id])
  curriculumId             String
  courseHistory            CourseHistory[]
}

model CourseHistory {
  id                  String              @id @default(uuid())
  studentRegistration String
  student             Student             @relation(fields: [studentRegistration], references: [registration])
  disciplineId        String
  discipline          Discipline          @relation(fields: [disciplineId], references: [id])
  status              StatusCourseHistory
  createdAt           DateTime            @default(now())
  semester            Int
  startTime           DateTime            @db.Time
  endTime             DateTime            @db.Time
  hours               Int
  daysWeek            String[]

  @@index([studentRegistration])
}

enum StatusCourseHistory {
  DONE
  INPROGRESS
  FAILED
  WITHDRAWAL
}

model ExtraCurricularActivitiesHistory {
  id                  String        @id @default(uuid())
  studentRegistration String
  student             Student       @relation(fields: [studentRegistration], references: [registration])
  extraCurricularName String
  startDate           DateTime      @db.Date
  endDate             DateTime      @db.Date
  hours               Int
  situation           SituationType
  activityType        String
  participationType   String?
  atUfc               Boolean
  institutionName     String
  institutionCountry  String?
  institutionCnpj     String?

  @@index([studentRegistration])
}

enum SituationType {
  DEFERIDO
  INDEFERIDO
  SEM_RESPOSTA
}
